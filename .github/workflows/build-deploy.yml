name: Build and Deploy Code

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: production
    
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE_NAME }}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Pull git repo
        uses: actions/checkout@v5.0.0

      # ---------------- Backend ----------------
      - name: Set up python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: '3.12.3'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install backend dependencies
        working-directory: ./backend
        run: pip install -r requirements.txt

      - name: Run backend tests
        working-directory: ./backend
        env:
          DATABASE_HOSTNAME: ${{ secrets.DATABASE_HOSTNAME }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALGORITHM: ${{ secrets.ALGORITHM }}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        run: |
          pip install pytest
          python -m pytest --disable-warnings
        
      # ---------------- Docker Login ----------------
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ---------------- Build & Push Backend ----------------
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/ai-fitness-tracker:latest

      # ---------------- Build & Push Frontend ----------------
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend/ai-fitness-tracker
          file: ./frontend/ai-fitness-tracker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/ai-fitness-tracker-frontend:latest

# ----------------------------------------------------------------------------

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
    environment: production

    steps:
      - name: Deploy via AWS SSM
        uses: peterkimzz/aws-ssm-send-command@master
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ secrets.INSTANCE_ID }}
          working-directory: /home/ec2-user/AI-Fitness-Tracker
          comment: Pull and deploy new containers
          command: |
            sudo -u ec2-user git pull origin main
            sudo -u ec2-user docker compose -f docker-compose-prod.yml pull
            sudo -u ec2-user docker compose -f docker-compose-prod.yml up -d --force-recreate
            sudo -u ec2-user docker image prune -f
